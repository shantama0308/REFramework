# Reference: https://build-cpp.github.io/cmkr/cmake-toml
# to build:
# > cmake -B build
# > cmake --build build --config Release
[project]
name = "CSharpAPIProject"
languages = ["CXX", "C", "CSharp"]
cmake-after = """
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
set(CMAKE_CSharp_FLAGS "${CMAKE_CSHARP_FLAGS} /langversion:latest /platform:x64")

# Disable exceptions
# string(REGEX REPLACE "/EHsc" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)
set(DYNAMIC_LOADER ON CACHE BOOL "" FORCE) # OpenXR
set(BUILD_TOOLS OFF CACHE BOOL "" FORCE) # DirectXTK

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    
    message(NOTICE "Building in Release mode")
endif()

set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

set(NUGET_PACKAGES_DIR "$ENV{NUGET_PACKAGES}")

# If NUGET_PACKAGES_DIR is not set, fall back to the default location
if(NOT NUGET_PACKAGES_DIR)
    if(WIN32)
        set(DEFAULT_NUGET_PATH "$ENV{USERPROFILE}/.nuget/packages")
    else()
        set(DEFAULT_NUGET_PATH "$ENV{HOME}/.nuget/packages")
    endif()
    set(NUGET_PACKAGES_DIR ${DEFAULT_NUGET_PATH})
endif()

# Set a bool if the generated reference assemblies exist in the build/bin folder
set(dd2_systemdll "${CMAKE_BINARY_DIR}/bin/dd2/REFramework.NET._System.dll")
set(dd2_applicationdll "${CMAKE_BINARY_DIR}/bin/dd2/REFramework.NET.application.dll")
set(dd2_viacoredll "${CMAKE_BINARY_DIR}/bin/dd2/REFramework.NET.viacore.dll")

set(re2_mscorlibdll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET._mscorlib.dll")
set(re2_systemdll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET._System.dll")
set(re2_systemcoredll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET._System.Core.dll")
set(re2_applicationdll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET.application.dll")
set(re2_viacoredll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET.viacore.dll")

# Initialize a variable to keep track of the existence of all files
set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2 TRUE)
set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2 TRUE)

# Check if each DLL exists
foreach(dll IN ITEMS ${dd2_systemdll} ${dd2_applicationdll} ${dd2_viacoredll})
  if(NOT EXISTS ${dll})
    set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2 FALSE)
    break() # Exit the loop as soon as one file is not found
  endif()
endforeach()

foreach(dll IN ITEMS ${re2_mscorlibdll} ${re2_systemdll} ${re2_systemcoredll} ${re2_applicationdll} ${re2_viacoredll})
  if(NOT EXISTS ${dll})
    set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2 FALSE)
    break() # Exit the loop as soon as one file is not found
  endif()
endforeach()

# Use the result
if(REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2)
  message(STATUS "All specified DLLs exist (DD2)")
else()
  message(STATUS "One or more specified DLLs do not exist (DD2)")
endif()

if (REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2)
  message(STATUS "All specified DLLs exist (RE2)")
else()
  message(STATUS "One or more specified DLLs do not exist (RE2)")
endif()

# Define a list of NuGet packages and their versions
# the last part, the package framework will only be used for copying the files
set(REFRAMEWORK_NUGET_PACKAGES
    "Microsoft.CodeAnalysis.Common:4.9.2:net7.0"
    "Microsoft.CodeAnalysis.CSharp:4.9.2:net7.0"
    "ImGui.NET:1.90.1.1:net6.0"
)

# Generate the VS_PACKAGE_REFERENCES property value
set(REFRAMEWORK_PACKAGE_REFERENCES "")
foreach(PACKAGE ${REFRAMEWORK_NUGET_PACKAGES})
    # Extract package name and version from the package string
    string(REPLACE ":" ";" PACKAGE_PARTS ${PACKAGE})
    list(GET PACKAGE_PARTS 0 PACKAGE_NAME)
    list(GET PACKAGE_PARTS 1 PACKAGE_VERSION)

    # Append the package reference to the REFRAMEWORK_PACKAGE_REFERENCES variable
    set(REFRAMEWORK_PACKAGE_REFERENCES "${REFRAMEWORK_PACKAGE_REFERENCES}${PACKAGE_NAME}_${PACKAGE_VERSION};")
endforeach()
"""

[conditions]
build-csharp-test-dd2 = "REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2"
build-csharp-test-re2 = "REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2"

[template.CSharpSharedTarget]
type = "shared"

[template.CSharpSharedTarget.properties]
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin"
RUNTIME_OUTPUT_DIRECTORY_DEBUG = "${CMAKE_BINARY_DIR}/bin"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib"
LIBRARY_OUTPUT_DIRECTORY_DEBUG = "${CMAKE_BINARY_DIR}/lib"
DOTNET_SDK = "Microsoft.NET.Sdk"
DOTNET_TARGET_FRAMEWORK = "net8.0-windows"
VS_CONFIGURATION_TYPE = "ClassLibrary"

# REFCoreDeps is a shared target that is used by the CSharpAPI and AssemblyGenerator targets
# Mainly because adding nuget packages to C++/CLI causes random problems
# Like compiling randomly failing, so we should keep all external nuget packages
# in an actual C# project
# It also contains other stuff like the C# compiler wrapper.
[target.REFCoreDeps]
type = "CSharpSharedTarget"
sources = ["REFCoreDeps/**.cs"]

# Not using .properties here because it overrides the template properties for whatever reason
cmake-after = """
set_target_properties(REFCoreDeps PROPERTIES VS_PACKAGE_REFERENCES "${REFRAMEWORK_PACKAGE_REFERENCES}")
"""

[target.csharp-api]
type = "shared"
include-directories = ["../include/"]
sources = ["REFrameworkNET/**.cpp", "REFrameworkNET/**.c"]
headers = ["REFrameworkNET/**.hpp", "REFrameworkNET/**.h"]
compile-features = ["cxx_std_20"]
compile-options = ["/EHa", "/MD", "/doc"]
link-libraries = [
    "REFCoreDeps"
]
cmake-after = """
foreach(PACKAGE ${REFRAMEWORK_NUGET_PACKAGES})
    # Extract package name and version from the package string
    string(REPLACE ":" ";" PACKAGE_PARTS ${PACKAGE})
    list(GET PACKAGE_PARTS 0 PACKAGE_NAME)
    list(GET PACKAGE_PARTS 1 PACKAGE_VERSION)
    list(GET PACKAGE_PARTS 2 PACKAGE_FRAMEWORK)

    # Copy the package files to the output directory
    add_custom_command(
        TARGET csharp-api POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
                ${NUGET_PACKAGES_DIR}/${PACKAGE_NAME}/${PACKAGE_VERSION}/lib/${PACKAGE_FRAMEWORK}
                ${CMAKE_BINARY_DIR}/bin/
        COMMENT "Copying ${PACKAGE_NAME} NuGet package"
    )
endforeach()

set(REFRAMEWORK_DOT_NET_ASSEMBLY_DIR "${CMAKE_BINARY_DIR}/bin")
set(REFRAMEWORK_DOT_NET_ASSEMBLY_PATH "${CMAKE_BINARY_DIR}/bin/REFramework.NET.dll")

set_target_properties(csharp-api PROPERTIES
VS_DOTNET_REFERENCE_REFCoreDeps
"${REFRAMEWORK_DOT_NET_ASSEMBLY_DIR}/REFCoreDeps.dll"
)

set_target_properties(csharp-api PROPERTIES VS_PACKAGE_REFERENCES "REFCoreDeps")
"""

[target.csharp-api.properties]
OUTPUT_NAME = "REFramework.NET"
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin/"
RUNTIME_OUTPUT_DIRECTORY_DEBUG = "${CMAKE_BINARY_DIR}/bin/"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/"
LIBRARY_OUTPUT_DIRECTORY_DEBUG = "${CMAKE_BINARY_DIR}/lib/"
COMMON_LANGUAGE_RUNTIME = "netcore"
DOTNET_TARGET_FRAMEWORK = "net8.0-windows"
# DOTNET_TARGET_FRAMEWORK_VERSION = "net8.0"
VS_GLOBAL_EnableManagedPackageReferenceSupport = "true"
# VS_PACKAGE_REFERENCES = "Microsoft.CodeAnalysis_4.9.2"
VS_GLOBAL_ConcurrentGarbageCollection = "true"

[target.AssemblyGenerator]
type = "CSharpSharedTarget"
sources = ["AssemblyGenerator/**.cs"]
link-libraries = [
    "csharp-api",
    "REFCoreDeps"
]
cmake-after = """
set_target_properties(AssemblyGenerator PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET
"${REFRAMEWORK_DOT_NET_ASSEMBLY_PATH}"
)


"""

[target.CSharpAPITest]
condition = "build-csharp-test-dd2"
type = "CSharpSharedTarget"
sources = ["test/Test/Test.cs"]
link-libraries = [
    "csharp-api"
]

cmake-after = """
set_target_properties(CSharpAPITest PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET
"${REFRAMEWORK_DOT_NET_ASSEMBLY_PATH}"
)

set_target_properties(CSharpAPITest PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET._System
"${dd2_systemdll}"
)

set_target_properties(CSharpAPITest PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET._System")

set_target_properties(CSharpAPITest PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET.viacore
"${dd2_viacoredll}"
)

set_target_properties(CSharpAPITest PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.viacore")

set_target_properties(CSharpAPITest PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET.application
"${dd2_applicationdll}"
)

set_target_properties(CSharpAPITest PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.application")

"""

[target.CSharpAPITestRE2]
condition = "build-csharp-test-re2"
type = "CSharpSharedTarget"
sources = ["test/Test/TestRE2.cs"]
link-libraries = [
    "csharp-api"
]

cmake-after = """
set_target_properties(CSharpAPITestRE2 PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET
"${REFRAMEWORK_DOT_NET_ASSEMBLY_PATH}"
)

set_target_properties(CSharpAPITestRE2 PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET._mscorlib
"${re2_mscorlibdll}"
)

set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET._mscorlib")

set_target_properties(CSharpAPITestRE2 PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET._System
"${re2_systemdll}"
)

set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET._System")

set_target_properties(CSharpAPITestRE2 PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET.System.Core
"${re2_systemcoredll}"
)

set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.System.Core")

set_target_properties(CSharpAPITestRE2 PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET.viacore
"${re2_viacoredll}"
)

set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.viacore")

set_target_properties(CSharpAPITestRE2 PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET.application
"${re2_applicationdll}"
)

set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.application")

"""