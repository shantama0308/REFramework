# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(CSharpAPIProject
	LANGUAGES
		CXX
		C
		CSharp
)

include(CSharpUtilities)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
set(CMAKE_CSharp_FLAGS "${CMAKE_CSHARP_FLAGS} /langversion:latest /platform:x64")

# Disable exceptions
# string(REGEX REPLACE "/EHsc" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)
set(DYNAMIC_LOADER ON CACHE BOOL "" FORCE) # OpenXR
set(BUILD_TOOLS OFF CACHE BOOL "" FORCE) # DirectXTK

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    
    message(NOTICE "Building in Release mode")
endif()

set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

set(NUGET_PACKAGES_DIR "$ENV{NUGET_PACKAGES}")

# If NUGET_PACKAGES_DIR is not set, fall back to the default location
if(NOT NUGET_PACKAGES_DIR)
    if(WIN32)
        set(DEFAULT_NUGET_PATH "$ENV{USERPROFILE}/.nuget/packages")
    else()
        set(DEFAULT_NUGET_PATH "$ENV{HOME}/.nuget/packages")
    endif()
    set(NUGET_PACKAGES_DIR ${DEFAULT_NUGET_PATH})
endif()

# Set a bool if the generated reference assemblies exist in the build/bin folder
set(dd2_systemdll "${CMAKE_BINARY_DIR}/bin/dd2/REFramework.NET._System.dll")
set(dd2_applicationdll "${CMAKE_BINARY_DIR}/bin/dd2/REFramework.NET.application.dll")
set(dd2_viacoredll "${CMAKE_BINARY_DIR}/bin/dd2/REFramework.NET.viacore.dll")

set(re2_mscorlibdll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET._mscorlib.dll")
set(re2_systemdll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET._System.dll")
set(re2_systemcoredll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET._System.Core.dll")
set(re2_applicationdll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET.application.dll")
set(re2_viacoredll "${CMAKE_BINARY_DIR}/bin/re2/REFramework.NET.viacore.dll")

# Initialize a variable to keep track of the existence of all files
set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2 TRUE)
set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2 TRUE)

# Check if each DLL exists
foreach(dll IN ITEMS ${dd2_systemdll} ${dd2_applicationdll} ${dd2_viacoredll})
  if(NOT EXISTS ${dll})
    set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2 FALSE)
    break() # Exit the loop as soon as one file is not found
  endif()
endforeach()

foreach(dll IN ITEMS ${re2_mscorlibdll} ${re2_systemdll} ${re2_systemcoredll} ${re2_applicationdll} ${re2_viacoredll})
  if(NOT EXISTS ${dll})
    set(REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2 FALSE)
    break() # Exit the loop as soon as one file is not found
  endif()
endforeach()

# Use the result
if(REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2)
  message(STATUS "All specified DLLs exist (DD2)")
else()
  message(STATUS "One or more specified DLLs do not exist (DD2)")
endif()

if (REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2)
  message(STATUS "All specified DLLs exist (RE2)")
else()
  message(STATUS "One or more specified DLLs do not exist (RE2)")
endif()

# Define a list of NuGet packages and their versions
# the last part, the package framework will only be used for copying the files
set(REFRAMEWORK_NUGET_PACKAGES
    "Microsoft.CodeAnalysis.Common:4.9.2:net7.0"
    "Microsoft.CodeAnalysis.CSharp:4.9.2:net7.0"
    "ImGui.NET:1.90.1.1:net6.0"
)

# Generate the VS_PACKAGE_REFERENCES property value
set(REFRAMEWORK_PACKAGE_REFERENCES "")
foreach(PACKAGE ${REFRAMEWORK_NUGET_PACKAGES})
    # Extract package name and version from the package string
    string(REPLACE ":" ";" PACKAGE_PARTS ${PACKAGE})
    list(GET PACKAGE_PARTS 0 PACKAGE_NAME)
    list(GET PACKAGE_PARTS 1 PACKAGE_VERSION)

    # Append the package reference to the REFRAMEWORK_PACKAGE_REFERENCES variable
    set(REFRAMEWORK_PACKAGE_REFERENCES "${REFRAMEWORK_PACKAGE_REFERENCES}${PACKAGE_NAME}_${PACKAGE_VERSION};")
endforeach()

# Target: REFCoreDeps
set(REFCoreDeps_SOURCES
	"REFCoreDeps/Compiler.cs"
	"REFCoreDeps/GarbageCollectionDisplay.cs"
	cmake.toml
)

add_library(REFCoreDeps SHARED)

target_sources(REFCoreDeps PRIVATE ${REFCoreDeps_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${REFCoreDeps_SOURCES})

set_target_properties(REFCoreDeps PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/bin/"
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/bin"
	RUNTIME_OUTPUT_DIRECTORY_DEBUG
		"${CMAKE_BINARY_DIR}/bin"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib"
	LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib"
	LIBRARY_OUTPUT_DIRECTORY_DEBUG
		"${CMAKE_BINARY_DIR}/lib"
	DOTNET_SDK
		Microsoft.NET.Sdk
	DOTNET_TARGET_FRAMEWORK
		net8.0-windows
	VS_CONFIGURATION_TYPE
		ClassLibrary
)

set(CMKR_TARGET REFCoreDeps)
set_target_properties(REFCoreDeps PROPERTIES VS_PACKAGE_REFERENCES "${REFRAMEWORK_PACKAGE_REFERENCES}")

# Target: csharp-api
set(csharp-api_SOURCES
	"REFrameworkNET/API.cpp"
	"REFrameworkNET/AssemblyInfo.cpp"
	"REFrameworkNET/Attributes/Method.cpp"
	"REFrameworkNET/Attributes/MethodHook.cpp"
	"REFrameworkNET/Attributes/Plugin.cpp"
	"REFrameworkNET/Callbacks.cpp"
	"REFrameworkNET/ManagedObject.cpp"
	"REFrameworkNET/Method.cpp"
	"REFrameworkNET/MethodHook.cpp"
	"REFrameworkNET/NativeObject.cpp"
	"REFrameworkNET/Plugin.cpp"
	"REFrameworkNET/PluginLoadContext.cpp"
	"REFrameworkNET/PluginManager.cpp"
	"REFrameworkNET/Proxy.cpp"
	"REFrameworkNET/SystemString.cpp"
	"REFrameworkNET/TDB.cpp"
	"REFrameworkNET/TypeDefinition.cpp"
	"REFrameworkNET/UnifiedObject.cpp"
	"REFrameworkNET/VM.cpp"
	"REFrameworkNET/API.hpp"
	"REFrameworkNET/Attributes/Method.hpp"
	"REFrameworkNET/Attributes/MethodHook.hpp"
	"REFrameworkNET/Attributes/Plugin.hpp"
	"REFrameworkNET/Callbacks.hpp"
	"REFrameworkNET/Field.hpp"
	"REFrameworkNET/IObject.hpp"
	"REFrameworkNET/IProxyable.hpp"
	"REFrameworkNET/InvokeRet.hpp"
	"REFrameworkNET/ManagedObject.hpp"
	"REFrameworkNET/ManagedSingleton.hpp"
	"REFrameworkNET/Method.hpp"
	"REFrameworkNET/MethodHook.hpp"
	"REFrameworkNET/MethodParameter.hpp"
	"REFrameworkNET/NativeObject.hpp"
	"REFrameworkNET/NativePool.hpp"
	"REFrameworkNET/NativeSingleton.hpp"
	"REFrameworkNET/ObjectEnumerator.hpp"
	"REFrameworkNET/Plugin.hpp"
	"REFrameworkNET/PluginLoadContext.hpp"
	"REFrameworkNET/PluginManager.hpp"
	"REFrameworkNET/Property.hpp"
	"REFrameworkNET/Proxy.hpp"
	"REFrameworkNET/SystemString.hpp"
	"REFrameworkNET/TDB.hpp"
	"REFrameworkNET/TypeDefinition.hpp"
	"REFrameworkNET/TypeInfo.hpp"
	"REFrameworkNET/UnifiedObject.hpp"
	"REFrameworkNET/Utility.hpp"
	"REFrameworkNET/VM.hpp"
	cmake.toml
)

add_library(csharp-api SHARED)

target_sources(csharp-api PRIVATE ${csharp-api_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${csharp-api_SOURCES})

target_compile_features(csharp-api PUBLIC
	cxx_std_20
)

target_compile_options(csharp-api PUBLIC
	"/EHa"
	"/MD"
	"/doc"
)

target_include_directories(csharp-api PUBLIC
	"../include/"
)

target_link_libraries(csharp-api PUBLIC
	REFCoreDeps
)

set_target_properties(csharp-api PROPERTIES
	OUTPUT_NAME
		REFramework.NET
	RUNTIME_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/bin/"
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/bin/"
	RUNTIME_OUTPUT_DIRECTORY_DEBUG
		"${CMAKE_BINARY_DIR}/bin/"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/"
	LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/"
	LIBRARY_OUTPUT_DIRECTORY_DEBUG
		"${CMAKE_BINARY_DIR}/lib/"
	COMMON_LANGUAGE_RUNTIME
		netcore
	DOTNET_TARGET_FRAMEWORK
		net8.0-windows
	VS_GLOBAL_EnableManagedPackageReferenceSupport
		true
	VS_GLOBAL_ConcurrentGarbageCollection
		true
)

set(CMKR_TARGET csharp-api)
foreach(PACKAGE ${REFRAMEWORK_NUGET_PACKAGES})
    # Extract package name and version from the package string
    string(REPLACE ":" ";" PACKAGE_PARTS ${PACKAGE})
    list(GET PACKAGE_PARTS 0 PACKAGE_NAME)
    list(GET PACKAGE_PARTS 1 PACKAGE_VERSION)
    list(GET PACKAGE_PARTS 2 PACKAGE_FRAMEWORK)

    # Copy the package files to the output directory
    add_custom_command(
        TARGET csharp-api POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
                ${NUGET_PACKAGES_DIR}/${PACKAGE_NAME}/${PACKAGE_VERSION}/lib/${PACKAGE_FRAMEWORK}
                ${CMAKE_BINARY_DIR}/bin/
        COMMENT "Copying ${PACKAGE_NAME} NuGet package"
    )
endforeach()

set(REFRAMEWORK_DOT_NET_ASSEMBLY_DIR "${CMAKE_BINARY_DIR}/bin")
set(REFRAMEWORK_DOT_NET_ASSEMBLY_PATH "${CMAKE_BINARY_DIR}/bin/REFramework.NET.dll")

set_target_properties(csharp-api PROPERTIES
VS_DOTNET_REFERENCE_REFCoreDeps
"${REFRAMEWORK_DOT_NET_ASSEMBLY_DIR}/REFCoreDeps.dll"
)

set_target_properties(csharp-api PROPERTIES VS_PACKAGE_REFERENCES "REFCoreDeps")

# Target: AssemblyGenerator
set(AssemblyGenerator_SOURCES
	"AssemblyGenerator/ClassGenerator.cs"
	"AssemblyGenerator/EnumGenerator.cs"
	"AssemblyGenerator/Generator.cs"
	"AssemblyGenerator/SyntaxTreeBuilder.cs"
	cmake.toml
)

add_library(AssemblyGenerator SHARED)

target_sources(AssemblyGenerator PRIVATE ${AssemblyGenerator_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${AssemblyGenerator_SOURCES})

target_link_libraries(AssemblyGenerator PUBLIC
	csharp-api
	REFCoreDeps
)

set_target_properties(AssemblyGenerator PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/bin/"
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/bin"
	RUNTIME_OUTPUT_DIRECTORY_DEBUG
		"${CMAKE_BINARY_DIR}/bin"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib"
	LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib"
	LIBRARY_OUTPUT_DIRECTORY_DEBUG
		"${CMAKE_BINARY_DIR}/lib"
	DOTNET_SDK
		Microsoft.NET.Sdk
	DOTNET_TARGET_FRAMEWORK
		net8.0-windows
	VS_CONFIGURATION_TYPE
		ClassLibrary
)

set(CMKR_TARGET AssemblyGenerator)
set_target_properties(AssemblyGenerator PROPERTIES
VS_DOTNET_REFERENCE_REFramework.NET
"${REFRAMEWORK_DOT_NET_ASSEMBLY_PATH}"
)

# Target: CSharpAPITest
if(REFRAMEWORK_REF_ASSEMBLIES_EXIST_DD2) # build-csharp-test-dd2
	set(CSharpAPITest_SOURCES
		"test/Test/Test.cs"
		cmake.toml
	)

	add_library(CSharpAPITest SHARED)

	target_sources(CSharpAPITest PRIVATE ${CSharpAPITest_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${CSharpAPITest_SOURCES})

	target_link_libraries(CSharpAPITest PUBLIC
		csharp-api
	)

	set_target_properties(CSharpAPITest PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY_RELEASE
			"${CMAKE_BINARY_DIR}/bin/"
		RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
			"${CMAKE_BINARY_DIR}/bin"
		RUNTIME_OUTPUT_DIRECTORY_DEBUG
			"${CMAKE_BINARY_DIR}/bin"
		LIBRARY_OUTPUT_DIRECTORY_RELEASE
			"${CMAKE_BINARY_DIR}/lib"
		LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
			"${CMAKE_BINARY_DIR}/lib"
		LIBRARY_OUTPUT_DIRECTORY_DEBUG
			"${CMAKE_BINARY_DIR}/lib"
		DOTNET_SDK
			Microsoft.NET.Sdk
		DOTNET_TARGET_FRAMEWORK
			net8.0-windows
		VS_CONFIGURATION_TYPE
			ClassLibrary
	)

	set(CMKR_TARGET CSharpAPITest)
	set_target_properties(CSharpAPITest PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET
	"${REFRAMEWORK_DOT_NET_ASSEMBLY_PATH}"
	)
	
set_target_properties(CSharpAPITest PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET._System
	"${dd2_systemdll}"
	)
	
set_target_properties(CSharpAPITest PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET._System")
	
set_target_properties(CSharpAPITest PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET.viacore
	"${dd2_viacoredll}"
	)
	
set_target_properties(CSharpAPITest PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.viacore")
	
set_target_properties(CSharpAPITest PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET.application
	"${dd2_applicationdll}"
	)
	
set_target_properties(CSharpAPITest PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.application")

endif()
# Target: CSharpAPITestRE2
if(REFRAMEWORK_REF_ASSEMBLIES_EXIST_RE2) # build-csharp-test-re2
	set(CSharpAPITestRE2_SOURCES
		"test/Test/TestRE2.cs"
		cmake.toml
	)

	add_library(CSharpAPITestRE2 SHARED)

	target_sources(CSharpAPITestRE2 PRIVATE ${CSharpAPITestRE2_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${CSharpAPITestRE2_SOURCES})

	target_link_libraries(CSharpAPITestRE2 PUBLIC
		csharp-api
	)

	set_target_properties(CSharpAPITestRE2 PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY_RELEASE
			"${CMAKE_BINARY_DIR}/bin/"
		RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
			"${CMAKE_BINARY_DIR}/bin"
		RUNTIME_OUTPUT_DIRECTORY_DEBUG
			"${CMAKE_BINARY_DIR}/bin"
		LIBRARY_OUTPUT_DIRECTORY_RELEASE
			"${CMAKE_BINARY_DIR}/lib"
		LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
			"${CMAKE_BINARY_DIR}/lib"
		LIBRARY_OUTPUT_DIRECTORY_DEBUG
			"${CMAKE_BINARY_DIR}/lib"
		DOTNET_SDK
			Microsoft.NET.Sdk
		DOTNET_TARGET_FRAMEWORK
			net8.0-windows
		VS_CONFIGURATION_TYPE
			ClassLibrary
	)

	set(CMKR_TARGET CSharpAPITestRE2)
	set_target_properties(CSharpAPITestRE2 PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET
	"${REFRAMEWORK_DOT_NET_ASSEMBLY_PATH}"
	)
	
set_target_properties(CSharpAPITestRE2 PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET._mscorlib
	"${re2_mscorlibdll}"
	)
	
set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET._mscorlib")
	
set_target_properties(CSharpAPITestRE2 PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET._System
	"${re2_systemdll}"
	)
	
set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET._System")
	
set_target_properties(CSharpAPITestRE2 PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET.System.Core
	"${re2_systemcoredll}"
	)
	
set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.System.Core")
	
set_target_properties(CSharpAPITestRE2 PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET.viacore
	"${re2_viacoredll}"
	)
	
set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.viacore")
	
set_target_properties(CSharpAPITestRE2 PROPERTIES
	VS_DOTNET_REFERENCE_REFramework.NET.application
	"${re2_applicationdll}"
	)
	
set_target_properties(CSharpAPITestRE2 PROPERTIES VS_PACKAGE_REFERENCES "REFramework.NET.application")

endif()
